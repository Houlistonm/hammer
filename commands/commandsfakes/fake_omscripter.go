// Code generated by counterfeiter. DO NOT EDIT.
package commandsfakes

import (
	"sync"

	"github.com/pivotal/pcf/commands"
	"github.com/pivotal/pcf/lockfile"
)

type FakeOMScripter struct {
	GenerateStub        func(lockfile.Lockfile, []string) []string
	generateMutex       sync.RWMutex
	generateArgsForCall []struct {
		arg1 lockfile.Lockfile
		arg2 []string
	}
	generateReturns struct {
		result1 []string
	}
	generateReturnsOnCall map[int]struct {
		result1 []string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOMScripter) Generate(arg1 lockfile.Lockfile, arg2 []string) []string {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.generateMutex.Lock()
	ret, specificReturn := fake.generateReturnsOnCall[len(fake.generateArgsForCall)]
	fake.generateArgsForCall = append(fake.generateArgsForCall, struct {
		arg1 lockfile.Lockfile
		arg2 []string
	}{arg1, arg2Copy})
	fake.recordInvocation("Generate", []interface{}{arg1, arg2Copy})
	fake.generateMutex.Unlock()
	if fake.GenerateStub != nil {
		return fake.GenerateStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.generateReturns
	return fakeReturns.result1
}

func (fake *FakeOMScripter) GenerateCallCount() int {
	fake.generateMutex.RLock()
	defer fake.generateMutex.RUnlock()
	return len(fake.generateArgsForCall)
}

func (fake *FakeOMScripter) GenerateCalls(stub func(lockfile.Lockfile, []string) []string) {
	fake.generateMutex.Lock()
	defer fake.generateMutex.Unlock()
	fake.GenerateStub = stub
}

func (fake *FakeOMScripter) GenerateArgsForCall(i int) (lockfile.Lockfile, []string) {
	fake.generateMutex.RLock()
	defer fake.generateMutex.RUnlock()
	argsForCall := fake.generateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeOMScripter) GenerateReturns(result1 []string) {
	fake.generateMutex.Lock()
	defer fake.generateMutex.Unlock()
	fake.GenerateStub = nil
	fake.generateReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeOMScripter) GenerateReturnsOnCall(i int, result1 []string) {
	fake.generateMutex.Lock()
	defer fake.generateMutex.Unlock()
	fake.GenerateStub = nil
	if fake.generateReturnsOnCall == nil {
		fake.generateReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.generateReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeOMScripter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateMutex.RLock()
	defer fake.generateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOMScripter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.OMScripter = new(FakeOMScripter)
